2022-06-07 19:11:02,637 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.2.0+b6c7c92
	PyTorch: 1.11.0+cpu
	TorchVision: 0.12.0+cpu
2022-06-07 19:11:02,638 INFO: 
  name: MPRNetLocal-GoPro
  model_type: ImageRestorationModel
  scale: 1
  num_gpu: 1
  manual_seed: 10
  datasets:[
    test:[
      name: gopro-test
      type: PairedImageDataset
      dataroot_gt: ./datasets/GoPro/test/target
      dataroot_lq: ./datasets/GoPro/test/input
      io_backend:[
        type: disk
      ]
      phase: test
      scale: 1
    ]
  ]
  network_g:[
    type: MPRNetLocal
    base_size: 384
  ]
  path:[
    pretrain_network_g: ./experiments/pretrained_models/MPRNet-GoPro.pth
    strict_load_g: True
    resume_state: None
    param_key: state_dict
    results_root: D:\Studia\Magisterskie\Magisterka\programy\Scale-recurrent Network for Deep Image Deblurring\SRN-Deblur\tlsc\results\MPRNetLocal-GoPro
    log: D:\Studia\Magisterskie\Magisterka\programy\Scale-recurrent Network for Deep Image Deblurring\SRN-Deblur\tlsc\results\MPRNetLocal-GoPro
    visualization: D:\Studia\Magisterskie\Magisterka\programy\Scale-recurrent Network for Deep Image Deblurring\SRN-Deblur\tlsc\results\MPRNetLocal-GoPro\visualization
  ]
  val:[
    save_img: True
    grids: False
    metrics:[
      psnr:[
        type: calculate_psnr
        crop_border: 0
        test_y_channel: False
      ]
      ssim:[
        type: calculate_ssim
        crop_border: 0
        test_y_channel: False
      ]
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  dist: False
  rank: 0
  world_size: 1
  auto_resume: False
  is_train: False

2022-06-07 19:11:02,640 INFO: Dataset PairedImageDataset - gopro-test is created.
2022-06-07 19:11:02,640 INFO: Number of test images in gopro-test: 2
2022-06-07 19:11:18,945 INFO: Network: MPRNetLocal, with parameters: 20,127,073
2022-06-07 19:11:18,945 INFO: MPRNetLocal(
  (shallow_feat1): Sequential(
    (0): Conv2d(3, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): CAB(
      (CA): CALayer(
        (avg_pool): AvgPool2d(kernel_size=[192, 192], base_size=(384, 384), stride=[192, 192], fast_imp=False)
        (conv_du): Sequential(
          (0): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(24, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): Sigmoid()
        )
      )
      (body): Sequential(
        (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): PReLU(num_parameters=1)
        (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (shallow_feat2): Sequential(
    (0): Conv2d(3, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): CAB(
      (CA): CALayer(
        (avg_pool): AvgPool2d(kernel_size=[192, 384], base_size=(384, 384), stride=[192, 384], fast_imp=False)
        (conv_du): Sequential(
          (0): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(24, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): Sigmoid()
        )
      )
      (body): Sequential(
        (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): PReLU(num_parameters=1)
        (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (shallow_feat3): Sequential(
    (0): Conv2d(3, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): CAB(
      (CA): CALayer(
        (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
        (conv_du): Sequential(
          (0): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(24, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): Sigmoid()
        )
      )
      (body): Sequential(
        (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): PReLU(num_parameters=1)
        (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (stage1_encoder): Encoder(
    (encoder_level1): Sequential(
      (0): CAB(
        (CA): CALayer(
          (avg_pool): AvgPool2d(kernel_size=[192, 192], base_size=(384, 384), stride=[192, 192], fast_imp=False)
          (conv_du): Sequential(
            (0): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): ReLU(inplace=True)
            (2): Conv2d(24, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): Sigmoid()
          )
        )
        (body): Sequential(
          (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): PReLU(num_parameters=1)
          (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): CAB(
        (CA): CALayer(
          (avg_pool): AvgPool2d(kernel_size=[192, 192], base_size=(384, 384), stride=[192, 192], fast_imp=False)
          (conv_du): Sequential(
            (0): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): ReLU(inplace=True)
            (2): Conv2d(24, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): Sigmoid()
          )
        )
        (body): Sequential(
          (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): PReLU(num_parameters=1)
          (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (encoder_level2): Sequential(
      (0): CAB(
        (CA): CALayer(
          (avg_pool): AvgPool2d(kernel_size=[96, 96], base_size=(384, 384), stride=[96, 96], fast_imp=False)
          (conv_du): Sequential(
            (0): Conv2d(144, 36, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): ReLU(inplace=True)
            (2): Conv2d(36, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): Sigmoid()
          )
        )
        (body): Sequential(
          (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): PReLU(num_parameters=1)
          (2): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): CAB(
        (CA): CALayer(
          (avg_pool): AvgPool2d(kernel_size=[96, 96], base_size=(384, 384), stride=[96, 96], fast_imp=False)
          (conv_du): Sequential(
            (0): Conv2d(144, 36, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): ReLU(inplace=True)
            (2): Conv2d(36, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): Sigmoid()
          )
        )
        (body): Sequential(
          (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): PReLU(num_parameters=1)
          (2): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (encoder_level3): Sequential(
      (0): CAB(
        (CA): CALayer(
          (avg_pool): AvgPool2d(kernel_size=[48, 48], base_size=(384, 384), stride=[48, 48], fast_imp=False)
          (conv_du): Sequential(
            (0): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): ReLU(inplace=True)
            (2): Conv2d(48, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): Sigmoid()
          )
        )
        (body): Sequential(
          (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): PReLU(num_parameters=1)
          (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): CAB(
        (CA): CALayer(
          (avg_pool): AvgPool2d(kernel_size=[48, 48], base_size=(384, 384), stride=[48, 48], fast_imp=False)
          (conv_du): Sequential(
            (0): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): ReLU(inplace=True)
            (2): Conv2d(48, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): Sigmoid()
          )
        )
        (body): Sequential(
          (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): PReLU(num_parameters=1)
          (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (down12): DownSample(
      (down): Sequential(
        (0): Upsample(scale_factor=0.5, mode=bilinear)
        (1): Conv2d(96, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (down23): DownSample(
      (down): Sequential(
        (0): Upsample(scale_factor=0.5, mode=bilinear)
        (1): Conv2d(144, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
  (stage1_decoder): Decoder(
    (decoder_level1): Sequential(
      (0): CAB(
        (CA): CALayer(
          (avg_pool): AvgPool2d(kernel_size=[192, 384], base_size=(384, 384), stride=[192, 384], fast_imp=False)
          (conv_du): Sequential(
            (0): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): ReLU(inplace=True)
            (2): Conv2d(24, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): Sigmoid()
          )
        )
        (body): Sequential(
          (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): PReLU(num_parameters=1)
          (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): CAB(
        (CA): CALayer(
          (avg_pool): AvgPool2d(kernel_size=[192, 384], base_size=(384, 384), stride=[192, 384], fast_imp=False)
          (conv_du): Sequential(
            (0): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): ReLU(inplace=True)
            (2): Conv2d(24, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): Sigmoid()
          )
        )
        (body): Sequential(
          (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): PReLU(num_parameters=1)
          (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (decoder_level2): Sequential(
      (0): CAB(
        (CA): CALayer(
          (avg_pool): AvgPool2d(kernel_size=[96, 192], base_size=(384, 384), stride=[96, 192], fast_imp=False)
          (conv_du): Sequential(
            (0): Conv2d(144, 36, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): ReLU(inplace=True)
            (2): Conv2d(36, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): Sigmoid()
          )
        )
        (body): Sequential(
          (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): PReLU(num_parameters=1)
          (2): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): CAB(
        (CA): CALayer(
          (avg_pool): AvgPool2d(kernel_size=[96, 192], base_size=(384, 384), stride=[96, 192], fast_imp=False)
          (conv_du): Sequential(
            (0): Conv2d(144, 36, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): ReLU(inplace=True)
            (2): Conv2d(36, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): Sigmoid()
          )
        )
        (body): Sequential(
          (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): PReLU(num_parameters=1)
          (2): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (decoder_level3): Sequential(
      (0): CAB(
        (CA): CALayer(
          (avg_pool): AvgPool2d(kernel_size=[48, 96], base_size=(384, 384), stride=[48, 96], fast_imp=False)
          (conv_du): Sequential(
            (0): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): ReLU(inplace=True)
            (2): Conv2d(48, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): Sigmoid()
          )
        )
        (body): Sequential(
          (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): PReLU(num_parameters=1)
          (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): CAB(
        (CA): CALayer(
          (avg_pool): AvgPool2d(kernel_size=[48, 96], base_size=(384, 384), stride=[48, 96], fast_imp=False)
          (conv_du): Sequential(
            (0): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): ReLU(inplace=True)
            (2): Conv2d(48, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): Sigmoid()
          )
        )
        (body): Sequential(
          (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): PReLU(num_parameters=1)
          (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (skip_attn1): CAB(
      (CA): CALayer(
        (avg_pool): AvgPool2d(kernel_size=[192, 384], base_size=(384, 384), stride=[192, 384], fast_imp=False)
        (conv_du): Sequential(
          (0): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(24, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): Sigmoid()
        )
      )
      (body): Sequential(
        (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): PReLU(num_parameters=1)
        (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (skip_attn2): CAB(
      (CA): CALayer(
        (avg_pool): AvgPool2d(kernel_size=[96, 192], base_size=(384, 384), stride=[96, 192], fast_imp=False)
        (conv_du): Sequential(
          (0): Conv2d(144, 36, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(36, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): Sigmoid()
        )
      )
      (body): Sequential(
        (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): PReLU(num_parameters=1)
        (2): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (up21): SkipUpSample(
      (up): Sequential(
        (0): Upsample(scale_factor=2.0, mode=bilinear)
        (1): Conv2d(144, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (up32): SkipUpSample(
      (up): Sequential(
        (0): Upsample(scale_factor=2.0, mode=bilinear)
        (1): Conv2d(192, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
  (stage2_encoder): Encoder(
    (encoder_level1): Sequential(
      (0): CAB(
        (CA): CALayer(
          (avg_pool): AvgPool2d(kernel_size=[192, 384], base_size=(384, 384), stride=[192, 384], fast_imp=False)
          (conv_du): Sequential(
            (0): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): ReLU(inplace=True)
            (2): Conv2d(24, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): Sigmoid()
          )
        )
        (body): Sequential(
          (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): PReLU(num_parameters=1)
          (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): CAB(
        (CA): CALayer(
          (avg_pool): AvgPool2d(kernel_size=[192, 384], base_size=(384, 384), stride=[192, 384], fast_imp=False)
          (conv_du): Sequential(
            (0): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): ReLU(inplace=True)
            (2): Conv2d(24, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): Sigmoid()
          )
        )
        (body): Sequential(
          (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): PReLU(num_parameters=1)
          (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (encoder_level2): Sequential(
      (0): CAB(
        (CA): CALayer(
          (avg_pool): AvgPool2d(kernel_size=[96, 192], base_size=(384, 384), stride=[96, 192], fast_imp=False)
          (conv_du): Sequential(
            (0): Conv2d(144, 36, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): ReLU(inplace=True)
            (2): Conv2d(36, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): Sigmoid()
          )
        )
        (body): Sequential(
          (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): PReLU(num_parameters=1)
          (2): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): CAB(
        (CA): CALayer(
          (avg_pool): AvgPool2d(kernel_size=[96, 192], base_size=(384, 384), stride=[96, 192], fast_imp=False)
          (conv_du): Sequential(
            (0): Conv2d(144, 36, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): ReLU(inplace=True)
            (2): Conv2d(36, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): Sigmoid()
          )
        )
        (body): Sequential(
          (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): PReLU(num_parameters=1)
          (2): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (encoder_level3): Sequential(
      (0): CAB(
        (CA): CALayer(
          (avg_pool): AvgPool2d(kernel_size=[48, 96], base_size=(384, 384), stride=[48, 96], fast_imp=False)
          (conv_du): Sequential(
            (0): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): ReLU(inplace=True)
            (2): Conv2d(48, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): Sigmoid()
          )
        )
        (body): Sequential(
          (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): PReLU(num_parameters=1)
          (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): CAB(
        (CA): CALayer(
          (avg_pool): AvgPool2d(kernel_size=[48, 96], base_size=(384, 384), stride=[48, 96], fast_imp=False)
          (conv_du): Sequential(
            (0): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): ReLU(inplace=True)
            (2): Conv2d(48, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): Sigmoid()
          )
        )
        (body): Sequential(
          (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): PReLU(num_parameters=1)
          (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (down12): DownSample(
      (down): Sequential(
        (0): Upsample(scale_factor=0.5, mode=bilinear)
        (1): Conv2d(96, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (down23): DownSample(
      (down): Sequential(
        (0): Upsample(scale_factor=0.5, mode=bilinear)
        (1): Conv2d(144, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (csff_enc1): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (csff_enc2): Conv2d(144, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (csff_enc3): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (csff_dec1): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (csff_dec2): Conv2d(144, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (csff_dec3): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
  )
  (stage2_decoder): Decoder(
    (decoder_level1): Sequential(
      (0): CAB(
        (CA): CALayer(
          (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
          (conv_du): Sequential(
            (0): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): ReLU(inplace=True)
            (2): Conv2d(24, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): Sigmoid()
          )
        )
        (body): Sequential(
          (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): PReLU(num_parameters=1)
          (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): CAB(
        (CA): CALayer(
          (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
          (conv_du): Sequential(
            (0): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): ReLU(inplace=True)
            (2): Conv2d(24, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): Sigmoid()
          )
        )
        (body): Sequential(
          (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): PReLU(num_parameters=1)
          (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (decoder_level2): Sequential(
      (0): CAB(
        (CA): CALayer(
          (avg_pool): AvgPool2d(kernel_size=[192, 192], base_size=(384, 384), stride=[192, 192], fast_imp=False)
          (conv_du): Sequential(
            (0): Conv2d(144, 36, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): ReLU(inplace=True)
            (2): Conv2d(36, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): Sigmoid()
          )
        )
        (body): Sequential(
          (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): PReLU(num_parameters=1)
          (2): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): CAB(
        (CA): CALayer(
          (avg_pool): AvgPool2d(kernel_size=[192, 192], base_size=(384, 384), stride=[192, 192], fast_imp=False)
          (conv_du): Sequential(
            (0): Conv2d(144, 36, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): ReLU(inplace=True)
            (2): Conv2d(36, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): Sigmoid()
          )
        )
        (body): Sequential(
          (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): PReLU(num_parameters=1)
          (2): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (decoder_level3): Sequential(
      (0): CAB(
        (CA): CALayer(
          (avg_pool): AvgPool2d(kernel_size=[96, 96], base_size=(384, 384), stride=[96, 96], fast_imp=False)
          (conv_du): Sequential(
            (0): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): ReLU(inplace=True)
            (2): Conv2d(48, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): Sigmoid()
          )
        )
        (body): Sequential(
          (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): PReLU(num_parameters=1)
          (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): CAB(
        (CA): CALayer(
          (avg_pool): AvgPool2d(kernel_size=[96, 96], base_size=(384, 384), stride=[96, 96], fast_imp=False)
          (conv_du): Sequential(
            (0): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): ReLU(inplace=True)
            (2): Conv2d(48, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): Sigmoid()
          )
        )
        (body): Sequential(
          (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): PReLU(num_parameters=1)
          (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (skip_attn1): CAB(
      (CA): CALayer(
        (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
        (conv_du): Sequential(
          (0): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(24, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): Sigmoid()
        )
      )
      (body): Sequential(
        (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): PReLU(num_parameters=1)
        (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (skip_attn2): CAB(
      (CA): CALayer(
        (avg_pool): AvgPool2d(kernel_size=[192, 192], base_size=(384, 384), stride=[192, 192], fast_imp=False)
        (conv_du): Sequential(
          (0): Conv2d(144, 36, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(36, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): Sigmoid()
        )
      )
      (body): Sequential(
        (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): PReLU(num_parameters=1)
        (2): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (up21): SkipUpSample(
      (up): Sequential(
        (0): Upsample(scale_factor=2.0, mode=bilinear)
        (1): Conv2d(144, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (up32): SkipUpSample(
      (up): Sequential(
        (0): Upsample(scale_factor=2.0, mode=bilinear)
        (1): Conv2d(192, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
  (stage3_orsnet): ORSNet(
    (orb1): ORB(
      (body): Sequential(
        (0): CAB(
          (CA): CALayer(
            (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
            (conv_du): Sequential(
              (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): ReLU(inplace=True)
              (2): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): Sigmoid()
            )
          )
          (body): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): PReLU(num_parameters=1)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
        )
        (1): CAB(
          (CA): CALayer(
            (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
            (conv_du): Sequential(
              (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): ReLU(inplace=True)
              (2): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): Sigmoid()
            )
          )
          (body): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): PReLU(num_parameters=1)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
        )
        (2): CAB(
          (CA): CALayer(
            (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
            (conv_du): Sequential(
              (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): ReLU(inplace=True)
              (2): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): Sigmoid()
            )
          )
          (body): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): PReLU(num_parameters=1)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
        )
        (3): CAB(
          (CA): CALayer(
            (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
            (conv_du): Sequential(
              (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): ReLU(inplace=True)
              (2): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): Sigmoid()
            )
          )
          (body): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): PReLU(num_parameters=1)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
        )
        (4): CAB(
          (CA): CALayer(
            (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
            (conv_du): Sequential(
              (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): ReLU(inplace=True)
              (2): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): Sigmoid()
            )
          )
          (body): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): PReLU(num_parameters=1)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
        )
        (5): CAB(
          (CA): CALayer(
            (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
            (conv_du): Sequential(
              (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): ReLU(inplace=True)
              (2): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): Sigmoid()
            )
          )
          (body): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): PReLU(num_parameters=1)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
        )
        (6): CAB(
          (CA): CALayer(
            (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
            (conv_du): Sequential(
              (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): ReLU(inplace=True)
              (2): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): Sigmoid()
            )
          )
          (body): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): PReLU(num_parameters=1)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
        )
        (7): CAB(
          (CA): CALayer(
            (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
            (conv_du): Sequential(
              (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): ReLU(inplace=True)
              (2): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): Sigmoid()
            )
          )
          (body): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): PReLU(num_parameters=1)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
        )
        (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (orb2): ORB(
      (body): Sequential(
        (0): CAB(
          (CA): CALayer(
            (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
            (conv_du): Sequential(
              (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): ReLU(inplace=True)
              (2): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): Sigmoid()
            )
          )
          (body): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): PReLU(num_parameters=1)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
        )
        (1): CAB(
          (CA): CALayer(
            (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
            (conv_du): Sequential(
              (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): ReLU(inplace=True)
              (2): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): Sigmoid()
            )
          )
          (body): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): PReLU(num_parameters=1)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
        )
        (2): CAB(
          (CA): CALayer(
            (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
            (conv_du): Sequential(
              (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): ReLU(inplace=True)
              (2): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): Sigmoid()
            )
          )
          (body): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): PReLU(num_parameters=1)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
        )
        (3): CAB(
          (CA): CALayer(
            (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
            (conv_du): Sequential(
              (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): ReLU(inplace=True)
              (2): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): Sigmoid()
            )
          )
          (body): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): PReLU(num_parameters=1)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
        )
        (4): CAB(
          (CA): CALayer(
            (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
            (conv_du): Sequential(
              (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): ReLU(inplace=True)
              (2): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): Sigmoid()
            )
          )
          (body): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): PReLU(num_parameters=1)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
        )
        (5): CAB(
          (CA): CALayer(
            (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
            (conv_du): Sequential(
              (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): ReLU(inplace=True)
              (2): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): Sigmoid()
            )
          )
          (body): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): PReLU(num_parameters=1)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
        )
        (6): CAB(
          (CA): CALayer(
            (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
            (conv_du): Sequential(
              (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): ReLU(inplace=True)
              (2): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): Sigmoid()
            )
          )
          (body): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): PReLU(num_parameters=1)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
        )
        (7): CAB(
          (CA): CALayer(
            (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
            (conv_du): Sequential(
              (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): ReLU(inplace=True)
              (2): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): Sigmoid()
            )
          )
          (body): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): PReLU(num_parameters=1)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
        )
        (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (orb3): ORB(
      (body): Sequential(
        (0): CAB(
          (CA): CALayer(
            (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
            (conv_du): Sequential(
              (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): ReLU(inplace=True)
              (2): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): Sigmoid()
            )
          )
          (body): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): PReLU(num_parameters=1)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
        )
        (1): CAB(
          (CA): CALayer(
            (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
            (conv_du): Sequential(
              (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): ReLU(inplace=True)
              (2): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): Sigmoid()
            )
          )
          (body): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): PReLU(num_parameters=1)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
        )
        (2): CAB(
          (CA): CALayer(
            (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
            (conv_du): Sequential(
              (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): ReLU(inplace=True)
              (2): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): Sigmoid()
            )
          )
          (body): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): PReLU(num_parameters=1)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
        )
        (3): CAB(
          (CA): CALayer(
            (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
            (conv_du): Sequential(
              (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): ReLU(inplace=True)
              (2): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): Sigmoid()
            )
          )
          (body): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): PReLU(num_parameters=1)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
        )
        (4): CAB(
          (CA): CALayer(
            (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
            (conv_du): Sequential(
              (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): ReLU(inplace=True)
              (2): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): Sigmoid()
            )
          )
          (body): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): PReLU(num_parameters=1)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
        )
        (5): CAB(
          (CA): CALayer(
            (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
            (conv_du): Sequential(
              (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): ReLU(inplace=True)
              (2): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): Sigmoid()
            )
          )
          (body): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): PReLU(num_parameters=1)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
        )
        (6): CAB(
          (CA): CALayer(
            (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
            (conv_du): Sequential(
              (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): ReLU(inplace=True)
              (2): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): Sigmoid()
            )
          )
          (body): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): PReLU(num_parameters=1)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
        )
        (7): CAB(
          (CA): CALayer(
            (avg_pool): AvgPool2d(kernel_size=[384, 384], base_size=(384, 384), stride=[384, 384], fast_imp=False)
            (conv_du): Sequential(
              (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): ReLU(inplace=True)
              (2): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): Sigmoid()
            )
          )
          (body): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): PReLU(num_parameters=1)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          )
        )
        (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (up_enc1): UpSample(
      (up): Sequential(
        (0): Upsample(scale_factor=2.0, mode=bilinear)
        (1): Conv2d(144, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (up_dec1): UpSample(
      (up): Sequential(
        (0): Upsample(scale_factor=2.0, mode=bilinear)
        (1): Conv2d(144, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (up_enc2): Sequential(
      (0): UpSample(
        (up): Sequential(
          (0): Upsample(scale_factor=2.0, mode=bilinear)
          (1): Conv2d(192, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
      (1): UpSample(
        (up): Sequential(
          (0): Upsample(scale_factor=2.0, mode=bilinear)
          (1): Conv2d(144, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (up_dec2): Sequential(
      (0): UpSample(
        (up): Sequential(
          (0): Upsample(scale_factor=2.0, mode=bilinear)
          (1): Conv2d(192, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
      (1): UpSample(
        (up): Sequential(
          (0): Upsample(scale_factor=2.0, mode=bilinear)
          (1): Conv2d(144, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (conv_enc1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (conv_enc2): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (conv_enc3): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (conv_dec1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (conv_dec2): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (conv_dec3): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
  )
  (sam12): SAM(
    (conv1): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (conv2): Conv2d(96, 3, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (conv3): Conv2d(3, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
  )
  (sam23): SAM(
    (conv1): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (conv2): Conv2d(96, 3, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (conv3): Conv2d(3, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
  )
  (concat12): Conv2d(192, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (concat23): Conv2d(192, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (tail): Conv2d(128, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
2022-06-07 19:11:18,972 INFO: Loading MPRNetLocal model from ./experiments/pretrained_models/MPRNet-GoPro.pth.
2022-06-07 19:11:19,398 INFO: Model [ImageRestorationModel] is created.
2022-06-07 19:11:19,398 INFO: Testing gopro-test...
